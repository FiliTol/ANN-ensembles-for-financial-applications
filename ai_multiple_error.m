clc
close all
clear all

format long

% ====================|
% MULTIPLE CLASSIFIER |
% ====================|

% Table to summarize all the results for all the countries
multiple_errors = zeros(2,4);
multiple_errors(1,1) = 1;
multiple_errors(2,1) = 2;

% Number of times to run the ensemble method
runs = 5;

% Function to extract best hyperparameters
f = @extract_top_values;

% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
% AUSTRALIA 
% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

% Errors for every country before aggregation on averages
final_errors = zeros(2,8);
final_errors(1,1) = 1;
final_errors(2,1) = 2;

% Replicate the data preparation as for single classifier

australian = importdata('data/australian/australian.dat');
A1_encoding = double(categorical(australian(:,1)));
A4 = categorical(australian(:,4));
A4_encoding = onehotencode(A4,2);
A5 = categorical(australian(:,5));
A5_encoding = onehotencode(A5,2);
A6 = categorical(australian(:,6));
A6_encoding = onehotencode(A6,2);
A8_encoding = double(categorical(australian(:,8)));
A9_encoding = double(categorical(australian(:,9)));
A11_encoding = double(categorical(australian(:,11)));
A12 = categorical(australian(:,12));
A12_encoding = onehotencode(A12,2);
TARGET = double(categorical(australian(:,15)));

australian_df = horzcat(A1_encoding(:,1), ...
    normalize(australian(:,2)),...
    normalize(australian(:,3)),...
    A4_encoding(:,1:3),...
    A5_encoding(:,1:14),...data
    A6_encoding(:,1:8),...
    normalize(australian(:,7)),...
    A8_encoding(:,1),...
    A9_encoding(:,1),...
    normalize(australian(:,10)),...
    A11_encoding(:,1),...
    A12_encoding(:,1:3),...
    normalize(australian(:,13)),...
    normalize(australian(:,14)),...
    TARGET(:,1));

cv = cvpartition(size(australian_df,1),'HoldOut',0.3);
idx = cv.test;
dataTrain = australian_df(~idx,:);
dataTest  = australian_df(idx,:);
X_train = dataTrain(:, 1:end-1);
Y_train = dataTrain(:, end);
X_test = dataTest(:, 1:end-1);
Y_test = dataTest(:, end);

clear A11_encoding A12 A12_encoding A1_encoding A4_encoding A4 A5 A5_encoding...
    A6 A6_encoding A8_encoding A9_encoding australian cv dataTest dataTrain...
    idx TARGET

% -------------------------------------------------------------------------
% 3 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,3).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,3).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,3).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,3).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,3).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,3).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    prediction = [net1.predict(X_test), net2.predict(X_test), net3.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,2) = mean(partial_results(:,1));
final_errors(2,2) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error

% -------------------------------------------------------------------------
% 5 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,5).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,5).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,5).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,5).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,5).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,5).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,5).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,5).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,5).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,5).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,3) = mean(partial_results(:,1));
final_errors(2,3) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5

% -------------------------------------------------------------------------
% 7 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,7).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,7).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,7).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,7).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,7).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,7).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,7).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,7).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,7).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,7).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,7).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,7).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,7).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,7).Var1(7),...
        'LayerBiasesInitializer','ones');

    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,4) = mean(partial_results(:,1));
final_errors(2,4) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7


% -------------------------------------------------------------------------
% 9 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,9).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,9).Var1(9),...
        'LayerBiasesInitializer','ones');
    

    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,5) = mean(partial_results(:,1));
final_errors(2,5) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9

% -------------------------------------------------------------------------
% 11 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,11).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,11).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,6) = mean(partial_results(:,1));
final_errors(2,6) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11


% -------------------------------------------------------------------------
% 13 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    net12 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(12),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(12),...
        'LayerBiasesInitializer','ones');
    
    net13 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,13).Var2(13),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,13).Var1(13),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test),...
        net12.predict(X_test),...
        net13.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,7) = mean(partial_results(:,1));
final_errors(2,7) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11 net12 net13

% -------------------------------------------------------------------------
% 15 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    net12 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(12),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(12),...
        'LayerBiasesInitializer','ones');
    
    net13 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(13),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(13),...
        'LayerBiasesInitializer','ones');
    
    net14 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(14),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(14),...
        'LayerBiasesInitializer','ones');
    
    net15 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(3,15).Var2(15),...
        'Activations','sigmoid',...
        'IterationLimit',f(3,15).Var1(15),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test),...
        net12.predict(X_test),...
        net13.predict(X_test),...
        net14.predict(X_test),...
        net15.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,8) = mean(partial_results(:,1));
final_errors(2,8) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11 net12 net13 net14 net15

% Final Error for Australian multiple classificators
multiple_errors(1,2) = mean(final_errors(1,2:end));
multiple_errors(2,2) = mean(final_errors(2,2:end));

clear australian_df final_errors X_test X_train Y_test Y_train



% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
% GERMAN 
% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

% Errors for every country before aggregation on averages
final_errors = zeros(2,8);
final_errors(1,1) = 1;
final_errors(2,1) = 2;

german = importdata('data/german/german.dat');
A1 = categorical(german.textdata(:,1));
A1_encoding = onehotencode(A1,2);
A3 = categorical(german.textdata(:,3));
A3_encoding = onehotencode(A3,2);
A4 = categorical(german.textdata(:,4));
A4_encoding = onehotencode(A4,2);
A6 = categorical(german.textdata(:,6));
A6_encoding = onehotencode(A6,2);
A7 = categorical(german.textdata(:,7));
A7_encoding = onehotencode(A7,2);
A9 = categorical(german.textdata(:,9));
A9_encoding = onehotencode(A9,2);
A10 = categorical(german.textdata(:,10));
A10_encoding = onehotencode(A10,2);
A12 = categorical(german.textdata(:,12));
A12_encoding = onehotencode(A12,2);
A14 = categorical(german.textdata(:,14));
A14_encoding = onehotencode(A14,2);
A15 = categorical(german.textdata(:,15));
A15_encoding = onehotencode(A15,2);
A17 = categorical(german.textdata(:,17));
A17_encoding = onehotencode(A17,2);
A19_encoding = double(categorical(german.textdata(:,19)));
A20_encoding = double(categorical(german.textdata(:,20)));
TARGET = double(categorical(german.data(:,1)));

german_df = horzcat(A1_encoding(:,1:4),...
    normalize(str2double(german.textdata(:,2))),...
    A3_encoding(:,1:5),...
    A4_encoding(:,1:10),...
    normalize(str2double(german.textdata(:,5))),...
    A6_encoding(:,1:5),...
    A7_encoding(:,1:5),...
    normalize(str2double(german.textdata(:,8))),...
    A9_encoding(:,1:4),...
    A10_encoding(:,1:3),...
    normalize(str2double(german.textdata(:,11))),...
    A12_encoding(:,1:4),...
    normalize(str2double(german.textdata(:,13))),...
    A14_encoding(:,1:3),...
    A15_encoding(:,1:3),...
    normalize(str2double(german.textdata(:,16))),...
    A17_encoding(:,1:4),...
    normalize(str2double(german.textdata(:,18))),...
    A19_encoding(:,1),...
    A20_encoding(:,1),...
    TARGET(:,1));

cv = cvpartition(size(german_df,1),'HoldOut',0.3);
idx = cv.test;
dataTrain = german_df(~idx,:);
dataTest  = german_df(idx,:);
X_train = dataTrain(:, 1:end-1);
Y_train = dataTrain(:, end);
X_test = dataTest(:, 1:end-1);
Y_test = dataTest(:, end);

clear A1 A10 A10_encoding A12 A12_encoding A14 A14_encoding A15 A15_encoding...
    A17 A17_encoding A19_encoding A1_encoding A20_encoding A3 A3_encoding...
    A4 A4_encoding A6 A6_encoding A7 A7_encoding A9 A9_encoding cv dataTest...
    dataTrain german idx TARGET

% -------------------------------------------------------------------------
% 3 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,3).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,3).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,3).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,3).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,3).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,3).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    prediction = [net1.predict(X_test), net2.predict(X_test), net3.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,2) = mean(partial_results(:,1));
final_errors(2,2) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error

% -------------------------------------------------------------------------
% 5 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,5).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,5).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,5).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,5).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,5).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,3) = mean(partial_results(:,1));
final_errors(2,3) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5

% -------------------------------------------------------------------------
% 7 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,7).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,7).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,7).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,7).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,7).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,7).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,7).Var1(7),...
        'LayerBiasesInitializer','ones');

    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,4) = mean(partial_results(:,1));
final_errors(2,4) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7


% -------------------------------------------------------------------------
% 9 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,9).Var1(9),...
        'LayerBiasesInitializer','ones');
    

    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,5) = mean(partial_results(:,1));
final_errors(2,5) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9

% -------------------------------------------------------------------------
% 11 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,11).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,6) = mean(partial_results(:,1));
final_errors(2,6) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11


% -------------------------------------------------------------------------
% 13 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    net12 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(12),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(12),...
        'LayerBiasesInitializer','ones');
    
    net13 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(13),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,13).Var1(13),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test),...
        net12.predict(X_test),...
        net13.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,7) = mean(partial_results(:,1));
final_errors(2,7) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11 net12 net13

% -------------------------------------------------------------------------
% 15 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    net12 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(12),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(12),...
        'LayerBiasesInitializer','ones');
    
    net13 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(13),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(13),...
        'LayerBiasesInitializer','ones');
    
    net14 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(14),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(14),...
        'LayerBiasesInitializer','ones');
    
    net15 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(15),...
        'Activations','sigmoid',...
        'IterationLimit',f(4,15).Var1(15),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test),...
        net12.predict(X_test),...
        net13.predict(X_test),...
        net14.predict(X_test),...
        net15.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,8) = mean(partial_results(:,1));
final_errors(2,8) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11 net12 net13 net14 net15


% Final Error for German multiple classificators
multiple_errors(1,3) = mean(final_errors(1,2:end));
multiple_errors(2,3) = mean(final_errors(2,2:end));

clear german_df final_errors X_test X_train Y_test Y_train

% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
% JAPANESE 
% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

% Errors for every country before aggregation on averages
final_errors = zeros(2,8);
final_errors(1,1) = 1;
final_errors(2,1) = 2;

opts = delimitedTextImportOptions("NumVariables", 16);
opts.DataLines = [1, Inf];
opts.Delimiter = " ";
opts.VariableNames = ["A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "TARGET"];
opts.VariableTypes = ["categorical", "double", "double", "categorical", "categorical", "categorical", "categorical", "double", "categorical", "categorical", "double", "categorical", "categorical", "double", "double", "categorical"];
opts.ImportErrorRule = "omitrow";
opts.MissingRule = "omitrow";
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
opts.ConsecutiveDelimitersRule = "join";
opts.LeadingDelimitersRule = "ignore";
opts = setvaropts(opts, ["A1", "A4", "A5", "A6", "A7", "A9", "A10", "A12", "A13", "TARGET"], "EmptyFieldRule", "auto");
japanese = readtable("data/japanese/original/data.dat", opts);
clear opts
A1 = categorical(japanese.A1);
A1_encoding = onehotencode(A1,2);
A4 = categorical(japanese.A4);
A4_encoding = onehotencode(A4,2);
A5 = categorical(japanese.A5);
A5_encoding = onehotencode(A5,2);
A6 = categorical(japanese.A6);
A6_encoding = onehotencode(A6,2);
A7 = categorical(japanese.A7);
A7_encoding = onehotencode(A7,2);
A9_encoding = double(categorical(japanese.A9));
A10_encoding = double(categorical(japanese.A10));
A12_encoding = double(categorical(japanese.A12));
A13 = categorical(japanese.A13);
A13_encoding = onehotencode(A13,2);
TARGET = double(categorical(japanese.TARGET));

japanese_df = horzcat(A1_encoding(:,1:3),...
    normalize(japanese.A2),...
    normalize(japanese.A3),...
    A4_encoding(:,1:4),...
    A5_encoding(:,1:4),...
    A6_encoding(:,1:15),...
    A7_encoding(:,1:10),...
    normalize(japanese.A8),...
    A9_encoding(:,1),...
    A10_encoding(:,1),...
    normalize(japanese.A11),...
    A12_encoding(:,1),...
    A13_encoding(:,1:3),...
    normalize(japanese.A14),...
    normalize(japanese.A15),...
    TARGET(:,1));

cv = cvpartition(size(japanese_df,1),'HoldOut',0.3);
idx = cv.test;
dataTrain = japanese_df(~idx,:);
dataTest  = japanese_df(idx,:);
X_train = dataTrain(:, 1:end-1);
Y_train = dataTrain(:, end);
X_test = dataTest(:, 1:end-1);
Y_test = dataTest(:, end);

clear A1 A10_encoding A12_encoding A13 A13_encoding A1_encoding A4 A4_encoding...
    A5 A5_encoding A6 A6_encoding A7 A7_encoding A9_encoding cv dataTest...
    dataTrain idx japanese TARGET

% -------------------------------------------------------------------------
% 3 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,3).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,3).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,3).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,3).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,3).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,3).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    prediction = [net1.predict(X_test), net2.predict(X_test), net3.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,2) = mean(partial_results(:,1));
final_errors(2,2) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error

% -------------------------------------------------------------------------
% 5 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,5).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,5).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,5).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,5).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,5).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,5).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,5).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,5).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,5).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,5).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,3) = mean(partial_results(:,1));
final_errors(2,3) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5

% -------------------------------------------------------------------------
% 7 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,7).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,7).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,7).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,7).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,7).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,7).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,7).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,7).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,7).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,7).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,7).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,7).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,7).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,7).Var1(7),...
        'LayerBiasesInitializer','ones');

    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,4) = mean(partial_results(:,1));
final_errors(2,4) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7


% -------------------------------------------------------------------------
% 9 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,9).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,9).Var1(9),...
        'LayerBiasesInitializer','ones');
    

    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,5) = mean(partial_results(:,1));
final_errors(2,5) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9

% -------------------------------------------------------------------------
% 11 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,11).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,11).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,6) = mean(partial_results(:,1));
final_errors(2,6) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11


% -------------------------------------------------------------------------
% 13 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    net12 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(12),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(12),...
        'LayerBiasesInitializer','ones');
    
    net13 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,13).Var2(13),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,13).Var1(13),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test),...
        net12.predict(X_test),...
        net13.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,7) = mean(partial_results(:,1));
final_errors(2,7) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11 net12 net13

% -------------------------------------------------------------------------
% 15 classifiers
% -------------------------------------------------------------------------

partial_results = zeros(runs,2);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(1),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(2),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(3),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(4),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(5),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(6),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(7),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(8),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(9),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(10),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(11),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    net12 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(12),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(12),...
        'LayerBiasesInitializer','ones');
    
    net13 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(13),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(13),...
        'LayerBiasesInitializer','ones');
    
    net14 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(14),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(14),...
        'LayerBiasesInitializer','ones');
    
    net15 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(5,15).Var2(15),...
        'Activations','sigmoid',...
        'IterationLimit',f(5,15).Var1(15),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test),...
        net12.predict(X_test),...
        net13.predict(X_test),...
        net14.predict(X_test),...
        net15.predict(X_test)];
    final_decision = mode(prediction,2);
    
    conf_matrix = confusionmat(Y_test, final_decision);

    true_positive = conf_matrix(2, 2); % Actual positive and predicted positive
    false_positive = conf_matrix(1, 2); % Actual negative but predicted positive
    true_negative = conf_matrix(1, 1); % Actual negative and predicted negative
    false_negative = conf_matrix(2, 1); % Actual positive but predicted negative
    
    % Compute Type I error (False Positive Rate)
    type1_error = false_positive / (false_positive + true_negative);
    
    % Compute Type II error (False Negative Rate)
    type2_error = false_negative / (false_negative + true_positive);
    
    partial_results(i, 1) = type1_error;
    partial_results(i, 2) = type2_error;

end

final_errors(1,8) = mean(partial_results(:,1));
final_errors(2,8) = mean(partial_results(:,2));

clear conf_matrix false_positive false_negative final_decision i net1 net2...
    net3 partial_results prediction true_positive true_negative type2_error...
    type1_error net4 net5 net6 net7 net8 net9 net10 net11 net12 net13 net14 net15


% Final Error for German multiple classificators
multiple_errors(1,4) = mean(final_errors(1,2:end));
multiple_errors(2,4) = mean(final_errors(2,2:end));

clear japanese_df final_errors X_test X_train Y_test Y_train

% Write final results to external matrix

writematrix(multiple_errors, "data/multiple_errors.csv")
















function top_n_values = extract_top_values(column_num, n)
    T = readtable("data/single.csv");
    
    % Choose the column based on which you want to extract the top values
    column_of_interest = ['Var', num2str(column_num)];
    
    % Sort the table based on the chosen column
    sorted_T = sortrows(T, column_of_interest, 'descend');
    
    % Extract the top n rows
    top_n_rows = sorted_T(1:n, :);
    
    % Extract the values from the first and second columns of the top n rows
    top_n_values = top_n_rows(:, {'Var1', 'Var2'});
end
