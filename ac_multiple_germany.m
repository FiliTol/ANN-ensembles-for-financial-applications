clc
close all
clear all

format long

% =========================================================================
% MULTIPLE CLASSIFIER
% =========================================================================

results = importdata("data/multiple.csv");

% Number of times to run the ensemble method
runs = 3;

% Function to extract best hyperparameters
f = @extract_top_values;

%---------
% GERMAN |
% --------

% Replicate the data preparation as for single classifier
german = importdata('data/german/german.dat');

A1 = categorical(german.textdata(:,1));
A1_encoding = onehotencode(A1,2);
A3 = categorical(german.textdata(:,3));
A3_encoding = onehotencode(A3,2);
A4 = categorical(german.textdata(:,4));
A4_encoding = onehotencode(A4,2);
A6 = categorical(german.textdata(:,6));
A6_encoding = onehotencode(A6,2);
A7 = categorical(german.textdata(:,7));
A7_encoding = onehotencode(A7,2);
A9 = categorical(german.textdata(:,9));
A9_encoding = onehotencode(A9,2);
A10 = categorical(german.textdata(:,10));
A10_encoding = onehotencode(A10,2);
A12 = categorical(german.textdata(:,12));
A12_encoding = onehotencode(A12,2);
A14 = categorical(german.textdata(:,14));
A14_encoding = onehotencode(A14,2);
A15 = categorical(german.textdata(:,15));
A15_encoding = onehotencode(A15,2);
A17 = categorical(german.textdata(:,17));
A17_encoding = onehotencode(A17,2);
A19_encoding = double(categorical(german.textdata(:,19)));
A20_encoding = double(categorical(german.textdata(:,20)));
TARGET = double(categorical(german.data(:,1)));

german_df = horzcat(A1_encoding(:,1:4),...
    normalize(str2double(german.textdata(:,2))),...
    A3_encoding(:,1:5),...
    A4_encoding(:,1:10),...
    normalize(str2double(german.textdata(:,5))),...
    A6_encoding(:,1:5),...
    A7_encoding(:,1:5),...
    normalize(str2double(german.textdata(:,8))),...
    A9_encoding(:,1:4),...
    A10_encoding(:,1:3),...
    normalize(str2double(german.textdata(:,11))),...
    A12_encoding(:,1:4),...
    normalize(str2double(german.textdata(:,13))),...
    A14_encoding(:,1:3),...
    A15_encoding(:,1:3),...
    normalize(str2double(german.textdata(:,16))),...
    A17_encoding(:,1:4),...
    normalize(str2double(german.textdata(:,18))),...
    A19_encoding(:,1),...
    A20_encoding(:,1),...
    TARGET(:,1));

cv = cvpartition(size(german_df,1),'HoldOut',0.3);
idx = cv.test;
dataTrain = german_df(~idx,:);
dataTest  = german_df(idx,:);
X_train = dataTrain(:, 1:end-1);
Y_train = dataTrain(:, end);
X_test = dataTest(:, 1:end-1);
Y_test = dataTest(:, end);

clear A1 A10 A10_encoding A12 A12_encoding A14 A14_encoding A15 A15_encoding...
    A17 A17_encoding A19_encoding A1_encoding A20_encoding A3 A3_encoding...
    A4 A4_encoding A6 A6_encoding A7 A7_encoding A9 A9_encoding cv dataTest...
    dataTrain german idx TARGET


% -------------------------------------------------------------------------
% 3 classifiers
% -------------------------------------------------------------------------

% According to the saved instance of Single Classifiers these are the best
% 3 single classifiers

reserve = zeros(runs,1);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,3).Var2(1),...
        'Activations','tanh',...
        'IterationLimit',f(4,3).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,3).Var2(2),...
        'Activations','tanh',...
        'IterationLimit',f(4,3).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,3).Var2(3),...
        'Activations','tanh',...
        'IterationLimit',f(4,3).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test), net2.predict(X_test), net3.predict(X_test)];
    final_decision = mode(prediction,2);
    
    accuracy_best_of_3 = sum(final_decision == Y_test)/length(final_decision);

    reserve(i,1) = accuracy_best_of_3;

end

accuracy_best_of_3 = mean(reserve);

results(2,3) = accuracy_best_of_3;

% -------------------------------------------------------------------------
% 5 classifiers
% -------------------------------------------------------------------------

reserve = zeros(runs,1);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(1),...
        'Activations','tanh',...
        'IterationLimit',f(3,5).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(2),...
        'Activations','tanh',...
        'IterationLimit',f(4,5).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(3),...
        'Activations','tanh',...
        'IterationLimit',f(4,5).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(4),...
        'Activations','tanh',...
        'IterationLimit',f(4,5).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,5).Var2(5),...
        'Activations','tanh',...
        'IterationLimit',f(4,5).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test)];
    final_decision = mode(prediction,2);
    
    accuracy_best_of_5 = sum(final_decision == Y_test)/length(final_decision);

    reserve(i,1) = accuracy_best_of_5;

end

accuracy_best_of_5 = mean(reserve);

results(3,3) = accuracy_best_of_5;


% -------------------------------------------------------------------------
% 7 classifiers
% -------------------------------------------------------------------------

reserve = zeros(runs,1);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(1),...
        'Activations','tanh',...
        'IterationLimit',f(4,7).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(2),...
        'Activations','tanh',...
        'IterationLimit',f(4,7).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(3),...
        'Activations','tanh',...
        'IterationLimit',f(4,7).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(4),...
        'Activations','tanh',...
        'IterationLimit',f(4,7).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(5),...
        'Activations','tanh',...
        'IterationLimit',f(4,7).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(6),...
        'Activations','tanh',...
        'IterationLimit',f(4,7).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,7).Var2(7),...
        'Activations','tanh',...
        'IterationLimit',f(4,7).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test)];
    final_decision = mode(prediction,2);
    
    accuracy_best_of_7 = sum(final_decision == Y_test)/length(final_decision);

    reserve(i,1) = accuracy_best_of_7;

end

accuracy_best_of_7 = mean(reserve);

results(4,3) = accuracy_best_of_7;


% -------------------------------------------------------------------------
% 9 classifiers
% -------------------------------------------------------------------------

reserve = zeros(runs,1);

for i = 1:runs
    
    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(1),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(2),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(3),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(4),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(5),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(6),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(7),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(8),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,9).Var2(9),...
        'Activations','tanh',...
        'IterationLimit',f(4,9).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test)];
    final_decision = mode(prediction,2);
    
    accuracy_best_of_9 = sum(final_decision == Y_test)/length(final_decision);

    reserve(i,1) = accuracy_best_of_9;

end

accuracy_best_of_9 = mean(reserve);

results(5,3) = accuracy_best_of_9;

% -------------------------------------------------------------------------
% 11 classifiers
% -------------------------------------------------------------------------

reserve = zeros(runs,1);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(1),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(2),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(3),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(4),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(5),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(6),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(7),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(8),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(9),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(10),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,11).Var2(11),...
        'Activations','tanh',...
        'IterationLimit',f(4,11).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test)];
    final_decision = mode(prediction,2);
    
    accuracy_best_of_11 = sum(final_decision == Y_test)/length(final_decision);

    reserve(i,1) = accuracy_best_of_11;

end

accuracy_best_of_11 = mean(reserve);

results(6,3) = accuracy_best_of_11;

% -------------------------------------------------------------------------
% 13 classifiers
% -------------------------------------------------------------------------

reserve = zeros(runs,1);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(1),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(2),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(3),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(4),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(5),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(6),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(7),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(8),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(9),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(10),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(11),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    net12 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(12),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(12),...
        'LayerBiasesInitializer','ones');
    
    net13 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,13).Var2(13),...
        'Activations','tanh',...
        'IterationLimit',f(4,13).Var1(13),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test),...
        net12.predict(X_test),...
        net13.predict(X_test)];
    final_decision = mode(prediction,2);
    
    accuracy_best_of_13 = sum(final_decision == Y_test)/length(final_decision);

    reserve(i,1) = accuracy_best_of_13;

end

accuracy_best_of_13 = mean(reserve);

results(7,3) = accuracy_best_of_13;


% -------------------------------------------------------------------------
% 15 classifiers
% -------------------------------------------------------------------------

reserve = zeros(runs,1);

for i = 1:runs

    net1 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(1),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(1),...
        'LayerBiasesInitializer','ones');
    
    net2 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(2),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(2),...
        'LayerBiasesInitializer','ones');
    
    net3 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(3),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(3),...
        'LayerBiasesInitializer','ones');
    
    net4 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(4),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(4),...
        'LayerBiasesInitializer','ones');
    
    net5 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(5),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(5),...
        'LayerBiasesInitializer','ones');
    
    net6 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(6),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(6),...
        'LayerBiasesInitializer','ones');
    
    net7 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(7),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(7),...
        'LayerBiasesInitializer','ones');
    
    net8 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(8),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(8),...
        'LayerBiasesInitializer','ones');
    
    net9 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(9),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(9),...
        'LayerBiasesInitializer','ones');
    
    net10 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(10),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(10),...
        'LayerBiasesInitializer','ones');
    
    net11 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(11),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(11),...
        'LayerBiasesInitializer','ones');
    
    net12 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(12),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(12),...
        'LayerBiasesInitializer','ones');
    
    net13 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(13),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(13),...
        'LayerBiasesInitializer','ones');
    
    net14 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(14),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(14),...
        'LayerBiasesInitializer','ones');
    
    net15 = fitcnet(X_train, Y_train,...
        'LayerSizes', f(4,15).Var2(15),...
        'Activations','tanh',...
        'IterationLimit',f(4,15).Var1(15),...
        'LayerBiasesInitializer','ones');
    
    
    % Thus by comparing the prediction with and using the majority vote
    % criteria:
    prediction = [net1.predict(X_test),...
        net2.predict(X_test),...
        net3.predict(X_test),...
        net4.predict(X_test),...
        net5.predict(X_test),...
        net6.predict(X_test),...
        net7.predict(X_test),...
        net8.predict(X_test),...
        net9.predict(X_test),...
        net10.predict(X_test),...
        net11.predict(X_test),...
        net12.predict(X_test),...
        net13.predict(X_test),...
        net14.predict(X_test),...
        net15.predict(X_test)];
    final_decision = mode(prediction,2);
    
    accuracy_best_of_15 = sum(final_decision == Y_test)/length(final_decision);

    reserve(i,1) = accuracy_best_of_15;

end

accuracy_best_of_15 = mean(reserve);

results(8,3) = accuracy_best_of_15;


writematrix(results,'data/multiple.csv')
















function top_n_values = extract_top_values(column_num, n)
    T = readtable("data/single.csv");
    
    % Choose the column based on which you want to extract the top values
    column_of_interest = ['Var', num2str(column_num)];
    
    % Sort the table based on the chosen column
    sorted_T = sortrows(T, column_of_interest, 'descend');
    
    % Extract the top n rows
    top_n_rows = sorted_T(1:n, :);
    
    % Extract the values from the first and second columns of the top n rows
    top_n_values = top_n_rows(:, {'Var1', 'Var2'});
end